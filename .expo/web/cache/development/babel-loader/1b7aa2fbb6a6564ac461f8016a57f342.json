{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = DrawerRouter;\nexports.DrawerActions = void 0;\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _nonSecure = require(\"nanoid/non-secure\");\n\nvar _TabRouter = _interopRequireWildcard(require(\"./TabRouter\"));\n\nvar _excluded = [\"defaultStatus\"];\n\nfunction _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== \"function\") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }\n\nfunction _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nvar DrawerActions = (0, _extends2.default)({}, _TabRouter.TabActions, {\n  openDrawer: function openDrawer() {\n    return {\n      type: 'OPEN_DRAWER'\n    };\n  },\n  closeDrawer: function closeDrawer() {\n    return {\n      type: 'CLOSE_DRAWER'\n    };\n  },\n  toggleDrawer: function toggleDrawer() {\n    return {\n      type: 'TOGGLE_DRAWER'\n    };\n  }\n});\nexports.DrawerActions = DrawerActions;\n\nvar isDrawerOpen = function isDrawerOpen(state) {\n  var _state$history;\n\n  return Boolean((_state$history = state.history) === null || _state$history === void 0 ? void 0 : _state$history.some(function (it) {\n    return it.type === 'drawer';\n  }));\n};\n\nvar openDrawer = function openDrawer(state) {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return (0, _extends2.default)({}, state, {\n    history: [].concat((0, _toConsumableArray2.default)(state.history), [{\n      type: 'drawer',\n      status: 'open'\n    }])\n  });\n};\n\nvar closeDrawer = function closeDrawer(state) {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return (0, _extends2.default)({}, state, {\n    history: state.history.filter(function (it) {\n      return it.type !== 'drawer';\n    })\n  });\n};\n\nfunction DrawerRouter(_ref) {\n  var defaultStatus = _ref.defaultStatus,\n      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);\n  var router = (0, _TabRouter.default)(rest);\n  return (0, _extends2.default)({}, router, {\n    type: 'drawer',\n    getInitialState: function getInitialState(_ref2) {\n      var routeNames = _ref2.routeNames,\n          routeParamList = _ref2.routeParamList,\n          routeGetIdList = _ref2.routeGetIdList;\n      var state = router.getInitialState({\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return (0, _extends2.default)({}, state, {\n        stale: false,\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getRehydratedState: function getRehydratedState(partialState, _ref3) {\n      var routeNames = _ref3.routeNames,\n          routeParamList = _ref3.routeParamList,\n          routeGetIdList = _ref3.routeGetIdList;\n\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      var state = router.getRehydratedState(partialState, {\n        routeNames: routeNames,\n        routeParamList: routeParamList,\n        routeGetIdList: routeGetIdList\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return (0, _extends2.default)({}, state, {\n        type: 'drawer',\n        key: \"drawer-\" + (0, _nonSecure.nanoid)()\n      });\n    },\n    getStateForRouteFocus: function getStateForRouteFocus(state, key) {\n      var result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n    getStateForAction: function getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n    actionCreators: DrawerActions\n  });\n}","map":{"version":3,"sources":["DrawerRouter.tsx"],"names":["DrawerActions","openDrawer","type","closeDrawer","toggleDrawer","isDrawerOpen","state","Boolean","it","history","status","rest","router","TabRouter","getInitialState","routeGetIdList","routeNames","routeParamList","defaultStatus","stale","key","nanoid","getRehydratedState","partialState","getStateForRouteFocus","result","getStateForAction","action","actionCreators"],"mappings":"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","sourcesContent":["import { nanoid } from 'nanoid/non-secure';\n\nimport TabRouter, {\n  TabActionHelpers,\n  TabActions,\n  TabActionType,\n  TabNavigationState,\n  TabRouterOptions,\n} from './TabRouter';\nimport type {\n  CommonNavigationAction,\n  ParamListBase,\n  PartialState,\n  Router,\n} from './types';\n\nexport type DrawerActionType =\n  | TabActionType\n  | {\n      type: 'OPEN_DRAWER' | 'CLOSE_DRAWER' | 'TOGGLE_DRAWER';\n      source?: string;\n      target?: string;\n    };\n\nexport type DrawerRouterOptions = TabRouterOptions & {\n  defaultStatus?: 'open' | 'closed';\n};\n\nexport type DrawerNavigationState<ParamList extends ParamListBase> = Omit<\n  TabNavigationState<ParamList>,\n  'type' | 'history'\n> & {\n  /**\n   * Type of the router, in this case, it's drawer.\n   */\n  type: 'drawer';\n  /**\n   * List of previously visited route keys and drawer open status.\n   */\n  history: (\n    | { type: 'route'; key: string }\n    | { type: 'drawer'; status: 'open' }\n  )[];\n};\n\nexport type DrawerActionHelpers<ParamList extends ParamListBase> =\n  TabActionHelpers<ParamList> & {\n    /**\n     * Open the drawer sidebar.\n     */\n    openDrawer(): void;\n\n    /**\n     * Close the drawer sidebar.\n     */\n    closeDrawer(): void;\n\n    /**\n     * Open the drawer sidebar if closed, or close if opened.\n     */\n    toggleDrawer(): void;\n  };\n\nexport const DrawerActions = {\n  ...TabActions,\n  openDrawer(): DrawerActionType {\n    return { type: 'OPEN_DRAWER' };\n  },\n  closeDrawer(): DrawerActionType {\n    return { type: 'CLOSE_DRAWER' };\n  },\n  toggleDrawer(): DrawerActionType {\n    return { type: 'TOGGLE_DRAWER' };\n  },\n};\n\nconst isDrawerOpen = (\n  state:\n    | DrawerNavigationState<ParamListBase>\n    | PartialState<DrawerNavigationState<ParamListBase>>\n) => Boolean(state.history?.some((it) => it.type === 'drawer'));\n\nconst openDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: [...state.history, { type: 'drawer', status: 'open' }],\n  };\n};\n\nconst closeDrawer = (\n  state: DrawerNavigationState<ParamListBase>\n): DrawerNavigationState<ParamListBase> => {\n  if (!isDrawerOpen(state)) {\n    return state;\n  }\n\n  return {\n    ...state,\n    history: state.history.filter((it) => it.type !== 'drawer'),\n  };\n};\n\nexport default function DrawerRouter({\n  defaultStatus,\n  ...rest\n}: DrawerRouterOptions): Router<\n  DrawerNavigationState<ParamListBase>,\n  DrawerActionType | CommonNavigationAction\n> {\n  const router = TabRouter(rest) as unknown as Router<\n    DrawerNavigationState<ParamListBase>,\n    TabActionType | CommonNavigationAction\n  >;\n\n  return {\n    ...router,\n\n    type: 'drawer',\n\n    getInitialState({ routeNames, routeParamList, routeGetIdList }) {\n      let state = router.getInitialState({\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (defaultStatus === 'open') {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        stale: false,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getRehydratedState(\n      partialState,\n      { routeNames, routeParamList, routeGetIdList }\n    ) {\n      if (partialState.stale === false) {\n        return partialState;\n      }\n\n      let state = router.getRehydratedState(partialState, {\n        routeNames,\n        routeParamList,\n        routeGetIdList,\n      });\n\n      if (isDrawerOpen(partialState)) {\n        state = openDrawer(state);\n      }\n\n      return {\n        ...state,\n        type: 'drawer',\n        key: `drawer-${nanoid()}`,\n      };\n    },\n\n    getStateForRouteFocus(state, key) {\n      const result = router.getStateForRouteFocus(state, key);\n\n      if (defaultStatus === 'open') {\n        return openDrawer(result);\n      }\n\n      return closeDrawer(result);\n    },\n\n    getStateForAction(state, action, options) {\n      switch (action.type) {\n        case 'OPEN_DRAWER':\n          return openDrawer(state);\n\n        case 'CLOSE_DRAWER':\n          return closeDrawer(state);\n\n        case 'TOGGLE_DRAWER':\n          if (isDrawerOpen(state)) {\n            return closeDrawer(state);\n          }\n\n          return openDrawer(state);\n\n        case 'GO_BACK':\n          if (defaultStatus === 'open') {\n            if (!isDrawerOpen(state)) {\n              return openDrawer(state);\n            }\n          } else {\n            if (isDrawerOpen(state)) {\n              return closeDrawer(state);\n            }\n          }\n\n          return router.getStateForAction(state, action, options);\n\n        default:\n          return router.getStateForAction(state, action, options);\n      }\n    },\n\n    actionCreators: DrawerActions,\n  };\n}\n"]},"metadata":{},"sourceType":"script"}